type User
  @model
  @auth(
    rules: [
      { allow: public, operations: [create, read] }
      { allow: owner, operations: [read], provider: userPools }
    ]
  )
  @key(name: "byActive", fields: ["isActive"], queryField: "usersByActive")
  @key(name: "byAdmin", fields: ["isAdmin"], queryField: "usersByAdmin") {
  id: ID!
  sub: String!
  email: String!
  image: String
  bio: String
  social: Social
  recipes: [Recipe] @connection(keyName: "byUser", fields: ["id"])
  messages: [Message] @connection(keyName: "byUser", fields: ["id"])
  likes: [Like] @connection(keyName: "byUser", fields: ["id"])
  isAdmin: Int!
  isActive: Int!
  isDeleted: Int!
}

type Recipe
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner, operations: [read], provider: userPools }
    ]
  )
  @key(
    name: "byUser"
    fields: ["userID", "createdAt"]
    queryField: "recipesByUser"
  )
  @key(
    name: "byCategory"
    fields: ["categoryID"]
    queryField: "recipesByCategory"
  )
  @key(
    name: "byDate"
    fields: ["typename", "createdAt"]
    queryField: "recipesByDate"
  ) {
  id: ID!
  recipeName: String!
  cuisine: String!
  prepTime: Int!
  serving: String!
  description: String!
  images: [String]
  video: String
  ingredients: [Ingredient]!
  instructions: [String]!
  calories: String!
  owner: ID!
  userID: ID!
  user: User @connection(fields: ["userID"])
  categoryID: ID!
  category: Category @connection(fields: ["categoryID"])
  comments: [Comment] @connection(keyName: "byRecipe", fields: ["id"])
  likes: [Like] @connection(keyName: "byRecipe", fields: ["id"])
  typename: String!
  isArchived: Int!
  createdAt: AWSDateTime
}

type Report
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner, operations: [read], provider: userPools }
    ]
  )
  @key(
    name: "byCount"
    fields: ["typename", "count"]
    queryField: "reportsByCount"
  ) {
  id: ID! # id is recipeID
  recipe: Recipe @connection(fields: ["id"])
  userID: ID! # recipe owner
  reportedUsers: [ReportedUsers]!
  count: Int!
  typename: String!
}

type Message
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner, operations: [read], provider: userPools }
    ]
  )
  @key(
    name: "byDate"
    fields: ["recipeID", "createdAt"]
    queryField: "messagesByDate"
  )
  @key(name: "byUser", fields: ["userID", "createdAt"]) {
  id: ID!
  recipeID: ID!
  recipe: Recipe @connection(fields: ["recipeID"])
  userID: ID!
  user: User @connection(fields: ["userID"])
  message: String!
  isRead: Int!
  createdAt: AWSDateTime
}

type Category
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner, operations: [read], provider: userPools }
    ]
  ) {
  id: ID!
  name: String!
  recipes: [Recipe] @connection(keyName: "byCategory", fields: ["id"])
}

type Comment
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner, operations: [read], provider: userPools }
    ]
  )
  @key(
    name: "byRecipe"
    fields: ["recipeID", "createdAt"]
    queryField: "commentsByDate"
  ) {
  id: ID!
  recipeID: ID!
  recipe: Recipe @connection(fields: ["recipeID"])
  userID: ID!
  user: User @connection(fields: ["userID"])
  content: String!
  createdAt: AWSDateTime
}

type Like
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: owner, operations: [read], provider: userPools }
    ]
  )
  @key(name: "byRecipe", fields: ["recipeID"])
  @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  recipeID: ID!
  recipe: Recipe @connection(fields: ["recipeID"])
  userID: ID!
  user: User @connection(fields: ["userID"])
}

type Ingredient {
  name: String!
  count: String!
}

type Social {
  instagram: String
  twitter: String
  facebook: String
}

type ReportedUsers {
  userID: ID!
  createdAt: AWSDateTime!
}
